name: Release

on:
  push:
    tags:
      - "v*"

permissions:
  contents: write

env:
  CARGO_TARGET_DIR: ${{ github.workspace }}/target

jobs:
  build:
    name: build (${{ matrix.target }} on ${{ matrix.runner }})
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - runner: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            os: linux
            arch: x86_64
            use-cross: false
          - runner: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            os: linux
            arch: aarch64
            use-cross: true
          - runner: macos-latest
            target: aarch64-apple-darwin
            os: macos
            arch: aarch64
            use-cross: false

    steps:
      - uses: actions/checkout@v5

      - name: Install Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          override: true
          profile: minimal

      - uses: Swatinem/rust-cache@v2

      - name: Add target (non-cross)
        if: ${{ !matrix.use-cross }}
        run: rustup target add ${{ matrix.target }}

      - name: Install cross (for cross-compiling)
        if: ${{ matrix.use-cross }}
        run: |
          cargo install cross --git https://github.com/cross-rs/cross
          rustup target add ${{ matrix.target }} || true

      - name: Build (cross)
        if: ${{ matrix.use-cross }}
        run: cross build --release --target ${{ matrix.target }}

      - name: Build (cargo)
        if: ${{ !matrix.use-cross }}
        run: cargo build --release --target ${{ matrix.target }}

      - name: Package (tar.gz)
        shell: bash
        run: |
          set -eux
          TAG="${GITHUB_REF_NAME#v}"  # "v1.2.3" -> "1.2.3"
          BIN_DIR="target/${{ matrix.target }}/release"
          DIST="dist"
          mkdir -p "$DIST"

          EXE="rz"
          BASENAME="rz-v${TAG}-${{ matrix.os }}-${{ matrix.arch }}"
          PKGDIR="${DIST}/${BASENAME}"
          mkdir -p "$PKGDIR"

          cp "${BIN_DIR}/${EXE}" "${PKGDIR}/"
          chmod +x "${PKGDIR}/${EXE}" || true
          [[ -f ./LICENSE ]] && cp LICENSE "${PKGDIR}/"

          (cd "$DIST" && tar czf "${BASENAME}.tar.gz" "${BASENAME}")

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: asset-${{ matrix.os }}-${{ matrix.arch }}
          path: dist/*.tar.gz
          if-no-files-found: error
          retention-days: 7

  publish:
    name: Create Release & Upload assets
    runs-on: ubuntu-latest
    needs: build

    steps:
      - uses: actions/checkout@v5

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true

      - name: Generate checksums (aggregate)
        shell: bash
        run: |
          set -eux
          cd dist
          : > SHA256SUMS.txt
          for f in *.tar.gz; do
            if command -v shasum >/dev/null 2>&1; then
              shasum -a 256 "$f" >> SHA256SUMS.txt
            else
              sha256sum "$f" >> SHA256SUMS.txt
            fi
          done
          cat SHA256SUMS.txt

      - name: Create GitHub Release
        run: |
          gh release create "${{ github.ref_name }}" \
            --title "Release ${{ github.ref_name }} :mouse:" \
            --notes "Automated release for ${{ github.ref_name }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload release assets
        run: |
          gh release upload "${{ github.ref_name }}" \
            dist/*.tar.gz \
            dist/SHA256SUMS.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
